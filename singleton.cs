// Паттерн Singleton (Одиночка)

// Тип: Порождающий паттерн

// Описание: Гарантирует, что у класса есть только один экземпляр, и предоставляет глобальную точку доступа к нему.

// Назначение: Когда нужен ровно один объект для координации действий в системе.

// Метафоры из реального мира:
// - Президент страны (всегда один).
// - Диспетчер задач в операционной системе.
// - Подключение к базе данных (часто только одно).

public class Singleton
{
    // 1. Приватное статическое поле для хранения единственного экземпляра
    private static Singleton instance;

    // 2. Приватный конструктор, чтобы нельзя было создать объект напрямую извне
    private Singleton()
    {
        // Здесь можно выполнить инициализацию объекта
    }

    // 3. Публичный статический метод для получения единственного экземпляра
    public static Singleton GetInstance()
    {
        // Ленивая инициализация: создаем экземпляр только при первом обращении
        if (instance == null)
        {
            instance = new Singleton();
        }
        return instance;
    }

    // Другие методы и свойства класса Singleton
    public void DoSomething()
    {
        Console.WriteLine("Singleton is doing something!");
    }
}

// Пример использования:
// Singleton s1 = Singleton.GetInstance();
// Singleton s2 = Singleton.GetInstance();
// Console.WriteLine(s1 == s2); // Выведет True, так как это один и тот же объект
// s1.DoSomething();

// Потенциальные проблемы:
// - Проблемы с многопоточностью: в многопоточной среде может быть создано несколько экземпляров. Требуется дополнительная синхронизация.
// - Сложность тестирования: Singleton создает глобальное состояние, что затрудняет написание изолированных тестов.
// - Нарушение принципа единственной ответственности: Singleton может выполнять несколько ролей.
