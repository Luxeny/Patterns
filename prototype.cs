// Паттерн Prototype (Прототип)

// Тип: Порождающий паттерн

// Описание: Позволяет создавать новые объекты путем копирования существующего объекта (прототипа), избегая явного создания объектов с помощью оператора `new`.

// Назначение: Когда создание объекта является дорогостоящей операцией, и проще создать копию существующего объекта.

// Метафоры из реального мира:
// - Клонирование овец (овца Долли - прототип)
// - Создание новых документов на основе шаблона (шаблон документа - прототип)
// - Копирование слайдов в презентации (слайд-прототип)

// Интерфейс прототипа (определяет метод Clone)
public interface IPrototype
{
    IPrototype Clone();
}

// Конкретный прототип
public class ConcretePrototype : IPrototype
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Конструктор для инициализации объекта
    public ConcretePrototype(int id, string name)
    {
        Id = id;
        Name = name;
    }

    // Реализация метода Clone (создает поверхностную копию)
    public IPrototype Clone()
    {
        // Создаем новый объект и копируем значения полей
        return new ConcretePrototype(this.Id, this.Name);

        // Для глубокого копирования нужно вручную копировать все внутренние объекты.
    }

    public void DisplayInfo()
    {
        Console.WriteLine($"ID: {Id}, Name: {Name}");
    }
}

// Пример использования:
// ConcretePrototype prototype = new ConcretePrototype(1, "Original");
// ConcretePrototype clone = (ConcretePrototype)prototype.Clone(); // Создаем копию
// clone.Id = 2; // Изменяем поле в копии
// prototype.DisplayInfo(); // ID: 1, Name: Original
// clone.DisplayInfo(); // ID: 2, Name: Original

// Потенциальные проблемы:
// - Поверхностное копирование: Метод Clone по умолчанию создает только поверхностную копию объекта.  Если объект содержит ссылочные типы (другие объекты), то будет скопирована только ссылка, а не сам объект. Это может привести к тому, что изменения в одном объекте отразятся и на другом.
// - Глубокое копирование: Реализация глубокого копирования (когда копируются все вложенные объекты) может быть сложной и требовать дополнительного кода.
// - Циклические ссылки:  Глубокое копирование объектов с циклическими ссылками может привести к бесконечной рекурсии.
